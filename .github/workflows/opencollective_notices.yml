name: OpenCollective PR Notices

on:
    workflow_dispatch:
        inputs:
            startDate:
                required: true
                type: string
            endDate:
                required: true
                type: string
    # and in the future schedule...

jobs:
    post_notices:
        permissions:
            contents: read
            pull-requests: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/github-script@v6
              with:
                  script: |
                      // First get the month we are working on and prepare our PR query range
                      var inputs = ${{ toJSON(inputs) }}
                      let startDate = inputs['startDate'];
                      let endDate = inputs['endDate'];

                      const getPRPage = async (startDate, endDate, page) => {
                        return await github.rest.search.issuesAndPullRequests({
                          q: `repo:${context.repo.owner}/${context.repo.repo}+is:pr+is:merged+merged:${startDate}..${endDate}`,
                          per_page: 100,
                          page
                        });
                      }

                      const addComment = async (prNumber, prUser) => {
                        console.log(`creating comment ${context.repo.owner} / ${context.repo.repo} / ${prNumber} / ${prUser}`);
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: prNumber,
                          body: `Hi there @${prUser}! This is the OpenCollective Notice for PRs merged from [${startDate} through ${endDate}](https://github.com/${context.repo.owner}/${context.repo.repo}/pulls?q=is%3Apr+merged%3A${startDate}..${endDate}+author%3A${prUser})

                      If you are interested in compensation for this work, the process with details is here:

                      https://github.com/ankidroid/Anki-Android/wiki/OpenCollective-Payment-Process#how-to-get-paid

                      We only post one comment per person per month to avoid spamming you, regardless of the number of PRs merged, but this note applies to all PRs merged for this month

                      Please note that GSoC contributions are okay for this process. Our philosophy is that our users have donated to AnkiDroid for all contributions. The only PRs that will not go through the OpenCollective process are ones directly related to am accepted GSoC project from a selected participant, since those receive a stipend from GSoC itself.

                      Please understand that our monthly budget is never guaranteed to cover all claims - the cap on payments-per-person may be lower, but we try to make our process as fair and transparent as possible, we just need your understanding.

                      Thanks!`
                        })
                      }


                      // Now get the PRs for the month, iterating over pages if needed (100 per page limit)
                      let result = await getPRPage(startDate, endDate, 1)

                      // How many pages? iterate until fetched page Math.ceil(total/per-page)
                      console.log(`total count is: ${result.data.total_count}`);
                      const pageCount = Math.ceil(result.data.total_count / 100);
                      console.log(`Should get a total of ${pageCount} pages`);
                      for (let i = 2; i <= pageCount; i++) {
                        console.log(`fetching page ${i}`);
                        const pageResult = await getPRPage(startDate, endDate, i);
                        console.log(`Got another page with ${pageResult.data.total_count} items`);
                        result.data.items = result.data.items.concat(pageResult.data.items);
                      }

                      // Process the results by putting the author in a map with a PR number associated
                      const uniqueContributorsWithPR = {}
                      result.data.items.forEach((pr, index) => {
                        console.log(`pr at index ${index} is ${pr.number} by ${pr.user.login} (title ${pr.title})`);
                        uniqueContributorsWithPR[pr.user.login] = pr.number;
                      })

                      // For each author in the map, post a comment on the associated PR
                      for (const key of Object.keys(uniqueContributorsWithPR)) {
                        // skip some users
                        if (key === 'github-actions' || key.includes('dependabot')) {
                          console.log(`ignoring pr with bot user ${key}`);
                          continue;
                        }
                        console.log(`Going to notify ${key} on PR ${uniqueContributorsWithPR[key]}`);
                        try {
                          await addComment(uniqueContributorsWithPR[key], key);
                        } catch (e) {
                          console.log('what happend?' + e);
                        }
                      }
