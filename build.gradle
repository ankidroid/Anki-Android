import org.gradle.internal.jvm.Jvm

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    // The version for the Kotlin plugin and dependencies
    ext.kotlin_version = '1.6.21'
    ext.lint_version = '30.2.1'
    ext.acra_version = '5.7.0'
    ext.ankidroid_backend_version = '0.1.10'
    ext.hamcrest_version = '2.2'
    ext.junit_version = '5.8.2'

    repositories {
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath "app.brant:amazonappstorepublisher:0.1.0"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:10.3.0"
    }
}

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
}

// Here we extract per-module "best practices" settings to a single top-level evaluation
subprojects {
    afterEvaluate { project ->

        if (project.hasProperty('android')) {
            project.android.testOptions.unitTests {
                includeAndroidResources = true
            }
            project.android.testOptions.unitTests.all {
                useJUnitPlatform()
                testLogging {
                    events "failed", "skipped"
                    showStackTraces = true
                    exceptionFormat = "full"
                }

                maxParallelForks = gradleTestMaxParallelForks
                forkEvery = 40
                systemProperties['junit.jupiter.execution.parallel.enabled'] = true
                systemProperties['junit.jupiter.execution.parallel.mode.default'] = "concurrent"
            }
        }

        // Deprecation is an error. Use @SuppressWarnings("deprecation") and justify in the PR if you must
        project.tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation" << "-Xlint:fallthrough" << "-Xmaxwarns" << "1000" << "-Werror"

            // https://guides.gradle.org/performance/#compiling_java
            // 1- fork improves things over time with repeated builds, doesn't harm CI single builds
            options.fork = true
            // 2- incremental will be the default in the future and can help now
            options.incremental = true
        }

        ktlint {
            // remove version override when ktlint gradle plugin releases with 0.45+ transitive
            // check here https://github.com/JLLeitschuh/ktlint-gradle/blob/ddd465e28d77b879384886e1eef5666ebe518b4d/plugin/gradle/libs.versions.toml#L3
            version = "0.45.2"
            disabledRules = ["no-wildcard-imports"]
        }

        /**
         Kotlin allows concrete function implementations inside interfaces.
         For those to work when Kotlin compilation targets the JVM backend, you have to enable the interoperability via
         'freeCompilerArgs' in your gradle file, and you have to choose one of the appropriate '-Xjvm-default' modes.

         https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces

         and we used "all" because we don't have downstream consumers
         https://docs.gradle.org/current/userguide/task_configuration_avoidance.html
        */
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions {
                allWarningsAsErrors = true
                freeCompilerArgs = ['-Xjvm-default=all']
            }
        }
    }
}

ext {

    jvmVersion = Jvm.current().javaVersion.majorVersion
    if (jvmVersion != "11" && jvmVersion != "14" && jvmVersion != "16") {
        println "\n\n\n"
        println "**************************************************************************************************************"
        println "\n\n\n"
        println "ERROR: AnkiDroid builds with JVM version 11, 14, or 16."
        println "  Incompatible major version detected: '" + jvmVersion + "'"
        println "\n\n\n"
        println "**************************************************************************************************************"
        println "\n\n\n"
        System.exit(1)
    }
    ciBuild = System.getenv("CI") == "true" // works for Travis CI or Github Actions
    // allows for -Dpre-dex=false to be set
    preDexEnabled = "true" == System.getProperty("pre-dex", "true")
    // allows for universal APKs to be generated
    universalApkEnabled = "true" == System.getProperty("universal-apk", "false")

    if (System.getProperty("os.name") == "Mac OS X") {
        // macOS reports hardware cores. This is accurate for CI, Intel (halved due to SMT) and Apple Silicon
        gradleTestMaxParallelForks = "sysctl -n hw.physicalcpu".execute().text.toInteger()
    } else if (ciBuild) {
        // GitHub Actions (Standard_DS2_v2) are 1:1 on Linux/Windows with two vCPU cores
        // Sources:
        // Standard_DS2_v2 https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#cloud-hosts-for-github-hosted-runners
        // Which is 1:1 https://docs.microsoft.com/en-gb/azure/virtual-machines/acu : DS1_v2 - DS15_v2 | 1:1
        gradleTestMaxParallelForks = 2
    } else {
        // Use 50% of cores to account for SMT which doesn't help this workload
        gradleTestMaxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}
